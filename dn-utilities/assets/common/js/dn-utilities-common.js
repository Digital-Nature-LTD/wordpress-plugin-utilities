var S=Object.defineProperty;var h=s=>{throw TypeError(s)};var d=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var i=(s,e,t)=>d(s,typeof e!="symbol"?e+"":e,t),c=(s,e,t)=>e.has(s)||h("Cannot "+t);var p=(s,e,t)=>e.has(s)?h("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(s):e.set(s,t);var l=(s,e,t)=>(c(s,e,"access private method"),t);var a,r;class m extends HTMLElement{constructor(t={}){super();p(this,a);i(this,"options",{template:null,mode:"open",attachShadow:!0});if(this.options={...this.options,...t},this.options.attachShadow&&this.attachShadow({mode:this.options.mode}),this.options.template){let o=document.createElement("template");o.innerHTML=this.options.template,this.shadowRoot.appendChild(o.content.cloneNode(!0))}}setSlotContent(t,o){let n=l(this,a,r).call(this,t);return n?(n.innerHTML="",n.appendChild(o),!0):!1}setSlotTextContent(t,o){let n=l(this,a,r).call(this,t);return n?(n.textContent=o,!0):!1}handleEvent(t){let o=t.type.charAt(0).toUpperCase()+t.type.slice(1);typeof this[`handle${o}`]=="function"?this[`handle${o}`](t):console.error(`No handler for event ${t.type}`)}}a=new WeakSet,r=function(t){let o=this.shadowRoot.querySelector(`slot[name="${t}"]`);return o||(console.error(`Slot ${t} does not exist`),null)};class u extends m{constructor(){super("digital-nature-dismissable-message-template");i(this,"CLASS_ERROR","error");i(this,"CLASS_WARNING","warning");i(this,"CLASS_SUCCESS","success");i(this,"CLASS_INFO","info")}setContent(t,o){this.setSlotTextContent("message",t),this.classList.remove(this.CLASS_ERROR,this.CLASS_WARNING,this.CLASS_INFO,this.CLASS_SUCCESS),this.classList.add(o)}}customElements.define("digital-nature-dismissable-message",u);export{m as D};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG4tdXRpbGl0aWVzLWNvbW1vbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYnVpbGQvbm9kZV9tb2R1bGVzL0BkaWdpdGFsLW5hdHVyZS1sdGQvd2ViLWNvbXBvbmVudC9kaWdpdGFsLW5hdHVyZS13ZWItY29tcG9uZW50LmpzIiwiLi4vLi4vLi4vLi4vYnVpbGQvYXNzZXRzL2NvbW1vbi9qcy93ZWItY29tcG9uZW50cy9kaWdpdGFsLW5hdHVyZS1kaXNtaXNzYWJsZS1tZXNzYWdlLWNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBEaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50IGV4dGVuZHMgSFRNTEVsZW1lbnRcclxue1xyXG4gICAgb3B0aW9ucyA9IHtcclxuICAgICAgICB0ZW1wbGF0ZTogbnVsbCxcclxuICAgICAgICBtb2RlOiAnb3BlbicsXHJcbiAgICAgICAgYXR0YWNoU2hhZG93OiB0cnVlLFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIC8vIG1lcmdlIGluIG5ldyBvcHRpb25zXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gey4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9uc307XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXR0YWNoU2hhZG93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHttb2RlOiB0aGlzLm9wdGlvbnMubW9kZX0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAvLyBnZXQgdGhlIHRlbXBsYXRlIGFuZCBhdHRhY2ggc2hhZG93IGRvbSB3aXRoIHRoYXQgY29udGVudFxyXG4gICAgICAgICAgICBsZXQgdGVtcGxhdGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgdGVtcGxhdGVFbGVtZW50LmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHRlbXBsYXRlRWxlbWVudC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY29udGVudHMgb2YgdGhlIHNsb3QgdG8gdGhlIGdpdmVuIGVsZW1lbnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2xvdE5hbWVcclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgc2V0U2xvdENvbnRlbnQoc2xvdE5hbWUsIGVsZW1lbnQpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHNsb3QgPSB0aGlzLiNnZXRTbG90QnlOYW1lKHNsb3ROYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKCFzbG90KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNsZWFyIGl0XHJcbiAgICAgICAgc2xvdC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAvLyBhZGQgbmV3IGNvbnRlbnRcclxuICAgICAgICBzbG90LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHRleHRDb250ZW50IGF0dHJpYnV0ZSBvZiB0aGUgc2xvdCB0byB0aGUgZ2l2ZW4gdmFsdWVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2xvdE5hbWVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcmV0dXJuIGJvb2xlYW5cclxuICAgICAqL1xyXG4gICAgc2V0U2xvdFRleHRDb250ZW50KHNsb3ROYW1lLCBjb250ZW50KVxyXG4gICAge1xyXG4gICAgICAgIGxldCBzbG90ID0gdGhpcy4jZ2V0U2xvdEJ5TmFtZShzbG90TmFtZSk7XHJcblxyXG4gICAgICAgIGlmICghc2xvdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzbG90LnRleHRDb250ZW50ID0gY29udGVudDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2xvdE5hbWVcclxuICAgICAqIEByZXR1cm4gbnVsbHxIVE1MRWxlbWVudFxyXG4gICAgICovXHJcbiAgICAjZ2V0U2xvdEJ5TmFtZShzbG90TmFtZSlcclxuICAgIHtcclxuICAgICAgICBsZXQgc2xvdCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGBzbG90W25hbWU9XCIke3Nsb3ROYW1lfVwiXWApO1xyXG5cclxuICAgICAgICBpZiAoIXNsb3QpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgU2xvdCAke3Nsb3ROYW1lfSBkb2VzIG5vdCBleGlzdGApO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzbG90O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxsb3dzIHNpbXBsZSBoYW5kbGluZyBvZiBldmVudHMuXHJcbiAgICAgKlxyXG4gICAgICogSWYgYSBoYW5kbGVyIGV4aXN0cyBmb3IgdGhlIGV2ZW50IHR5cGUsIHRoZW4gaXQgd2lsbCBiZSBjYWxsZWQuXHJcbiAgICAgKiBJZiBub3QsIHRoZW4gYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXHJcbiAgICAgKlxyXG4gICAgICogVGhlIGV2ZW50IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBoYW5kbGVyLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBoYW5kbGVyIHNob3VsZCBiZSBuYW1lZCBgaGFuZGxlPEV2ZW50VHlwZT5gIHdoZXJlIEV2ZW50VHlwZSBpcyB0aGVcclxuICAgICAqIGV2ZW50IHR5cGUgaW4gY2FtZWwgY2FzZSAtIGUuZy4gaGFuZGxlQ2xpY2ssIGhhbmRsZUtleWRvd24sIGhhbmRsZVNjcm9sbCBldGMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtldmVudH0gZXZlbnRcclxuICAgICAqIEByZXR1cm4gdm9pZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVFdmVudChldmVudCkge1xyXG4gICAgICAgIGxldCBjYXBpdGFsaXNlZEV2ZW50VHlwZSA9IGV2ZW50LnR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBldmVudC50eXBlLnNsaWNlKDEpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXNbYGhhbmRsZSR7Y2FwaXRhbGlzZWRFdmVudFR5cGV9YF0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB0aGlzW2BoYW5kbGUke2NhcGl0YWxpc2VkRXZlbnRUeXBlfWBdKGV2ZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBObyBoYW5kbGVyIGZvciBldmVudCAke2V2ZW50LnR5cGV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgRGlnaXRhbE5hdHVyZVdlYkNvbXBvbmVudCBmcm9tIFwiQGRpZ2l0YWwtbmF0dXJlLWx0ZC93ZWItY29tcG9uZW50XCI7XHJcblxyXG5jbGFzcyBEaWdpdGFsTmF0dXJlRGlzbWlzc2FibGVNZXNzYWdlQ29tcG9uZW50IGV4dGVuZHMgRGlnaXRhbE5hdHVyZVdlYkNvbXBvbmVudFxyXG57XHJcbiAgICBDTEFTU19FUlJPUiA9ICdlcnJvcic7XHJcbiAgICBDTEFTU19XQVJOSU5HID0gJ3dhcm5pbmcnO1xyXG4gICAgQ0xBU1NfU1VDQ0VTUyA9ICdzdWNjZXNzJztcclxuICAgIENMQVNTX0lORk8gPSAnaW5mbyc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2RpZ2l0YWwtbmF0dXJlLWRpc21pc3NhYmxlLW1lc3NhZ2UtdGVtcGxhdGUnKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb250ZW50KG1lc3NhZ2VUZXh0LCBzdGF0dXNDbGFzcylcclxuICAgIHtcclxuICAgICAgICB0aGlzLnNldFNsb3RUZXh0Q29udGVudCgnbWVzc2FnZScsIG1lc3NhZ2VUZXh0KTtcclxuICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DTEFTU19FUlJPUiwgdGhpcy5DTEFTU19XQVJOSU5HLCB0aGlzLkNMQVNTX0lORk8sIHRoaXMuQ0xBU1NfU1VDQ0VTUyk7XHJcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKHN0YXR1c0NsYXNzKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gYWRkIHRoZSBjdXN0b20gZWxlbWVudCB0byB0aGUgcmVnaXN0cnlcclxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkaWdpdGFsLW5hdHVyZS1kaXNtaXNzYWJsZS1tZXNzYWdlJywgRGlnaXRhbE5hdHVyZURpc21pc3NhYmxlTWVzc2FnZUNvbXBvbmVudCk7Il0sIm5hbWVzIjpbIl9EaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50X2luc3RhbmNlcyIsImdldFNsb3RCeU5hbWVfZm4iLCJEaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50Iiwib3B0aW9ucyIsIl9fcHJpdmF0ZUFkZCIsIl9fcHVibGljRmllbGQiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJzbG90TmFtZSIsImVsZW1lbnQiLCJzbG90IiwiX19wcml2YXRlTWV0aG9kIiwiY29udGVudCIsImV2ZW50IiwiY2FwaXRhbGlzZWRFdmVudFR5cGUiLCJEaWdpdGFsTmF0dXJlRGlzbWlzc2FibGVNZXNzYWdlQ29tcG9uZW50IiwibWVzc2FnZVRleHQiLCJzdGF0dXNDbGFzcyJdLCJtYXBwaW5ncyI6ImdaQUFlLElBQUFBLEVBQUFDLEVBQUEsTUFBTUMsVUFBa0MsV0FDdkQsQ0FPSSxZQUFZQyxFQUFVLEdBQUksQ0FDdEIsUUFUT0MsRUFBQSxLQUFBSixHQUVYSyxFQUFBLGVBQVUsQ0FDTixTQUFVLEtBQ1YsS0FBTSxPQUNOLGFBQWMsRUFDakIsR0FNRyxRQUFLLFFBQVUsQ0FBQyxHQUFHLEtBQUssUUFBUyxHQUFHRixDQUFPLEVBRXZDLEtBQUssUUFBUSxjQUNiLEtBQUssYUFBYSxDQUFDLEtBQU0sS0FBSyxRQUFRLElBQUksQ0FBQyxFQUczQyxLQUFLLFFBQVEsU0FBVSxDQUV2QixJQUFJRyxFQUFrQixTQUFTLGNBQWMsVUFBVSxFQUN2REEsRUFBZ0IsVUFBWSxLQUFLLFFBQVEsU0FDekMsS0FBSyxXQUFXLFlBQVlBLEVBQWdCLFFBQVEsVUFBVSxFQUFJLENBQUMsQ0FDdEUsQ0FDSixDQVFELGVBQWVDLEVBQVVDLEVBQ3pCLENBQ0ksSUFBSUMsRUFBT0MsRUFBQSxLQUFLVixFQUFBQyxHQUFMLFVBQW9CTSxHQUUvQixPQUFLRSxHQUtMQSxFQUFLLFVBQVksR0FFakJBLEVBQUssWUFBWUQsQ0FBTyxFQUVqQixJQVJJLEVBU2QsQ0FTRCxtQkFBbUJELEVBQVVJLEVBQzdCLENBQ0ksSUFBSUYsRUFBT0MsRUFBQSxLQUFLVixFQUFBQyxHQUFMLFVBQW9CTSxHQUUvQixPQUFLRSxHQUlMQSxFQUFLLFlBQWNFLEVBRVosSUFMSSxFQU1kLENBZ0NELFlBQVlDLEVBQU8sQ0FDZixJQUFJQyxFQUF1QkQsRUFBTSxLQUFLLE9BQU8sQ0FBQyxFQUFFLFlBQVcsRUFBS0EsRUFBTSxLQUFLLE1BQU0sQ0FBQyxFQUU5RSxPQUFPLEtBQUssU0FBU0MsQ0FBb0IsRUFBRSxHQUFNLFdBQ2pELEtBQUssU0FBU0EsQ0FBb0IsRUFBRSxFQUFFRCxDQUFLLEVBRTNDLFFBQVEsTUFBTSx3QkFBd0JBLEVBQU0sSUFBSSxFQUFFLENBRXpELENBRUwsQ0E1R2VaLEVBQUEsWUF3RVhDLEVBQWMsU0FBQ00sRUFDZixDQUNJLElBQUlFLEVBQU8sS0FBSyxXQUFXLGNBQWMsY0FBY0YsQ0FBUSxJQUFJLEVBRW5FLE9BQUtFLElBQ0QsUUFBUSxNQUFNLFFBQVFGLENBQVEsaUJBQWlCLEVBQ3hDLEtBSWQsRUNoRkwsTUFBTU8sVUFBaURaLENBQ3ZELENBTUksYUFBYyxDQUNWLE1BQU0sNkNBQTZDLEVBTnZERyxFQUFBLG1CQUFjLFNBQ2RBLEVBQUEscUJBQWdCLFdBQ2hCQSxFQUFBLHFCQUFnQixXQUNoQkEsRUFBQSxrQkFBYSxPQUlaLENBRUQsV0FBV1UsRUFBYUMsRUFDeEIsQ0FDSSxLQUFLLG1CQUFtQixVQUFXRCxDQUFXLEVBQzlDLEtBQUssVUFBVSxPQUFPLEtBQUssWUFBYSxLQUFLLGNBQWUsS0FBSyxXQUFZLEtBQUssYUFBYSxFQUMvRixLQUFLLFVBQVUsSUFBSUMsQ0FBVyxDQUNqQyxDQUNMLENBR0EsZUFBZSxPQUFPLHFDQUFzQ0YsQ0FBd0MiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19
