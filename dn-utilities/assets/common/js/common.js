var S=Object.defineProperty;var h=s=>{throw TypeError(s)};var d=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var i=(s,e,t)=>d(s,typeof e!="symbol"?e+"":e,t),c=(s,e,t)=>e.has(s)||h("Cannot "+t);var p=(s,e,t)=>e.has(s)?h("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(s):e.set(s,t);var l=(s,e,t)=>(c(s,e,"access private method"),t);var a,r;class m extends HTMLElement{constructor(t={}){super();p(this,a);i(this,"options",{template:null,mode:"open",attachShadow:!0});if(this.options={...this.options,...t},this.options.attachShadow&&this.attachShadow({mode:this.options.mode}),this.options.template){let o=document.createElement("template");o.innerHTML=this.options.template,this.shadowRoot.appendChild(o.content.cloneNode(!0))}}setSlotContent(t,o){let n=l(this,a,r).call(this,t);return n?(n.innerHTML="",n.appendChild(o),!0):!1}setSlotTextContent(t,o){let n=l(this,a,r).call(this,t);return n?(n.textContent=o,!0):!1}handleEvent(t){let o=t.type.charAt(0).toUpperCase()+t.type.slice(1);typeof this[`handle${o}`]=="function"?this[`handle${o}`](t):console.error(`No handler for event ${t.type}`)}}a=new WeakSet,r=function(t){let o=this.shadowRoot.querySelector(`slot[name="${t}"]`);return o||(console.error(`Slot ${t} does not exist`),null)};class u extends m{constructor(){super("digital-nature-dismissable-message-template");i(this,"CLASS_ERROR","error");i(this,"CLASS_WARNING","warning");i(this,"CLASS_SUCCESS","success");i(this,"CLASS_INFO","info")}setContent(t,o){this.setSlotTextContent("message",t),this.classList.remove(this.CLASS_ERROR,this.CLASS_WARNING,this.CLASS_INFO,this.CLASS_SUCCESS),this.classList.add(o)}}customElements.define("digital-nature-dismissable-message",u);export{m as D};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9idWlsZC9ub2RlX21vZHVsZXMvQGRpZ2l0YWwtbmF0dXJlLWx0ZC93ZWItY29tcG9uZW50L2RpZ2l0YWwtbmF0dXJlLXdlYi1jb21wb25lbnQuanMiLCIuLi8uLi8uLi8uLi9idWlsZC9hc3NldHMvY29tbW9uL2pzL3dlYi1jb21wb25lbnRzL2RpZ2l0YWwtbmF0dXJlLWRpc21pc3NhYmxlLW1lc3NhZ2UtY29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIERpZ2l0YWxOYXR1cmVXZWJDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudFxyXG57XHJcbiAgICBvcHRpb25zID0ge1xyXG4gICAgICAgIHRlbXBsYXRlOiBudWxsLFxyXG4gICAgICAgIG1vZGU6ICdvcGVuJyxcclxuICAgICAgICBhdHRhY2hTaGFkb3c6IHRydWUsXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgLy8gbWVyZ2UgaW4gbmV3IG9wdGlvbnNcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7Li4udGhpcy5vcHRpb25zLCAuLi5vcHRpb25zfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdHRhY2hTaGFkb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6IHRoaXMub3B0aW9ucy5tb2RlfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgdGVtcGxhdGUgYW5kIGF0dGFjaCBzaGFkb3cgZG9tIHdpdGggdGhhdCBjb250ZW50XHJcbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlO1xyXG4gICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodGVtcGxhdGVFbGVtZW50LmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjb250ZW50cyBvZiB0aGUgc2xvdCB0byB0aGUgZ2l2ZW4gZWxlbWVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzbG90TmFtZVxyXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBzZXRTbG90Q29udGVudChzbG90TmFtZSwgZWxlbWVudClcclxuICAgIHtcclxuICAgICAgICBsZXQgc2xvdCA9IHRoaXMuI2dldFNsb3RCeU5hbWUoc2xvdE5hbWUpO1xyXG5cclxuICAgICAgICBpZiAoIXNsb3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2xlYXIgaXRcclxuICAgICAgICBzbG90LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIC8vIGFkZCBuZXcgY29udGVudFxyXG4gICAgICAgIHNsb3QuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdGV4dENvbnRlbnQgYXR0cmlidXRlIG9mIHRoZSBzbG90IHRvIHRoZSBnaXZlbiB2YWx1ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzbG90TmFtZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4gYm9vbGVhblxyXG4gICAgICovXHJcbiAgICBzZXRTbG90VGV4dENvbnRlbnQoc2xvdE5hbWUsIGNvbnRlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHNsb3QgPSB0aGlzLiNnZXRTbG90QnlOYW1lKHNsb3ROYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKCFzbG90KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNsb3QudGV4dENvbnRlbnQgPSBjb250ZW50O1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzbG90TmFtZVxyXG4gICAgICogQHJldHVybiBudWxsfEhUTUxFbGVtZW50XHJcbiAgICAgKi9cclxuICAgICNnZXRTbG90QnlOYW1lKHNsb3ROYW1lKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBzbG90ID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYHNsb3RbbmFtZT1cIiR7c2xvdE5hbWV9XCJdYCk7XHJcblxyXG4gICAgICAgIGlmICghc2xvdCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBTbG90ICR7c2xvdE5hbWV9IGRvZXMgbm90IGV4aXN0YCk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNsb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGxvd3Mgc2ltcGxlIGhhbmRsaW5nIG9mIGV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBJZiBhIGhhbmRsZXIgZXhpc3RzIGZvciB0aGUgZXZlbnQgdHlwZSwgdGhlbiBpdCB3aWxsIGJlIGNhbGxlZC5cclxuICAgICAqIElmIG5vdCwgdGhlbiBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgZXZlbnQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGhhbmRsZXIuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIGhhbmRsZXIgc2hvdWxkIGJlIG5hbWVkIGBoYW5kbGU8RXZlbnRUeXBlPmAgd2hlcmUgRXZlbnRUeXBlIGlzIHRoZVxyXG4gICAgICogZXZlbnQgdHlwZSBpbiBjYW1lbCBjYXNlIC0gZS5nLiBoYW5kbGVDbGljaywgaGFuZGxlS2V5ZG93biwgaGFuZGxlU2Nyb2xsIGV0Yy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2V2ZW50fSBldmVudFxyXG4gICAgICogQHJldHVybiB2b2lkXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XHJcbiAgICAgICAgbGV0IGNhcGl0YWxpc2VkRXZlbnRUeXBlID0gZXZlbnQudHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGV2ZW50LnR5cGUuc2xpY2UoMSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpc1tgaGFuZGxlJHtjYXBpdGFsaXNlZEV2ZW50VHlwZX1gXSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHRoaXNbYGhhbmRsZSR7Y2FwaXRhbGlzZWRFdmVudFR5cGV9YF0oZXZlbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE5vIGhhbmRsZXIgZm9yIGV2ZW50ICR7ZXZlbnQudHlwZX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBEaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50IGZyb20gXCJAZGlnaXRhbC1uYXR1cmUtbHRkL3dlYi1jb21wb25lbnRcIjtcclxuXHJcbmNsYXNzIERpZ2l0YWxOYXR1cmVEaXNtaXNzYWJsZU1lc3NhZ2VDb21wb25lbnQgZXh0ZW5kcyBEaWdpdGFsTmF0dXJlV2ViQ29tcG9uZW50XHJcbntcclxuICAgIENMQVNTX0VSUk9SID0gJ2Vycm9yJztcclxuICAgIENMQVNTX1dBUk5JTkcgPSAnd2FybmluZyc7XHJcbiAgICBDTEFTU19TVUNDRVNTID0gJ3N1Y2Nlc3MnO1xyXG4gICAgQ0xBU1NfSU5GTyA9ICdpbmZvJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignZGlnaXRhbC1uYXR1cmUtZGlzbWlzc2FibGUtbWVzc2FnZS10ZW1wbGF0ZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbnRlbnQobWVzc2FnZVRleHQsIHN0YXR1c0NsYXNzKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc2V0U2xvdFRleHRDb250ZW50KCdtZXNzYWdlJywgbWVzc2FnZVRleHQpO1xyXG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNMQVNTX0VSUk9SLCB0aGlzLkNMQVNTX1dBUk5JTkcsIHRoaXMuQ0xBU1NfSU5GTywgdGhpcy5DTEFTU19TVUNDRVNTKTtcclxuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoc3RhdHVzQ2xhc3MpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBhZGQgdGhlIGN1c3RvbSBlbGVtZW50IHRvIHRoZSByZWdpc3RyeVxyXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2RpZ2l0YWwtbmF0dXJlLWRpc21pc3NhYmxlLW1lc3NhZ2UnLCBEaWdpdGFsTmF0dXJlRGlzbWlzc2FibGVNZXNzYWdlQ29tcG9uZW50KTsiXSwibmFtZXMiOlsiX0RpZ2l0YWxOYXR1cmVXZWJDb21wb25lbnRfaW5zdGFuY2VzIiwiZ2V0U2xvdEJ5TmFtZV9mbiIsIkRpZ2l0YWxOYXR1cmVXZWJDb21wb25lbnQiLCJvcHRpb25zIiwiX19wcml2YXRlQWRkIiwiX19wdWJsaWNGaWVsZCIsInRlbXBsYXRlRWxlbWVudCIsInNsb3ROYW1lIiwiZWxlbWVudCIsInNsb3QiLCJfX3ByaXZhdGVNZXRob2QiLCJjb250ZW50IiwiZXZlbnQiLCJjYXBpdGFsaXNlZEV2ZW50VHlwZSIsIkRpZ2l0YWxOYXR1cmVEaXNtaXNzYWJsZU1lc3NhZ2VDb21wb25lbnQiLCJtZXNzYWdlVGV4dCIsInN0YXR1c0NsYXNzIl0sIm1hcHBpbmdzIjoiZ1pBQWUsSUFBQUEsRUFBQUMsRUFBQSxNQUFNQyxVQUFrQyxXQUN2RCxDQU9JLFlBQVlDLEVBQVUsR0FBSSxDQUN0QixRQVRPQyxFQUFBLEtBQUFKLEdBRVhLLEVBQUEsZUFBVSxDQUNOLFNBQVUsS0FDVixLQUFNLE9BQ04sYUFBYyxFQUNqQixHQU1HLFFBQUssUUFBVSxDQUFDLEdBQUcsS0FBSyxRQUFTLEdBQUdGLENBQU8sRUFFdkMsS0FBSyxRQUFRLGNBQ2IsS0FBSyxhQUFhLENBQUMsS0FBTSxLQUFLLFFBQVEsSUFBSSxDQUFDLEVBRzNDLEtBQUssUUFBUSxTQUFVLENBRXZCLElBQUlHLEVBQWtCLFNBQVMsY0FBYyxVQUFVLEVBQ3ZEQSxFQUFnQixVQUFZLEtBQUssUUFBUSxTQUN6QyxLQUFLLFdBQVcsWUFBWUEsRUFBZ0IsUUFBUSxVQUFVLEVBQUksQ0FBQyxDQUN0RSxDQUNKLENBUUQsZUFBZUMsRUFBVUMsRUFDekIsQ0FDSSxJQUFJQyxFQUFPQyxFQUFBLEtBQUtWLEVBQUFDLEdBQUwsVUFBb0JNLEdBRS9CLE9BQUtFLEdBS0xBLEVBQUssVUFBWSxHQUVqQkEsRUFBSyxZQUFZRCxDQUFPLEVBRWpCLElBUkksRUFTZCxDQVNELG1CQUFtQkQsRUFBVUksRUFDN0IsQ0FDSSxJQUFJRixFQUFPQyxFQUFBLEtBQUtWLEVBQUFDLEdBQUwsVUFBb0JNLEdBRS9CLE9BQUtFLEdBSUxBLEVBQUssWUFBY0UsRUFFWixJQUxJLEVBTWQsQ0FnQ0QsWUFBWUMsRUFBTyxDQUNmLElBQUlDLEVBQXVCRCxFQUFNLEtBQUssT0FBTyxDQUFDLEVBQUUsWUFBVyxFQUFLQSxFQUFNLEtBQUssTUFBTSxDQUFDLEVBRTlFLE9BQU8sS0FBSyxTQUFTQyxDQUFvQixFQUFFLEdBQU0sV0FDakQsS0FBSyxTQUFTQSxDQUFvQixFQUFFLEVBQUVELENBQUssRUFFM0MsUUFBUSxNQUFNLHdCQUF3QkEsRUFBTSxJQUFJLEVBQUUsQ0FFekQsQ0FFTCxDQTVHZVosRUFBQSxZQXdFWEMsRUFBYyxTQUFDTSxFQUNmLENBQ0ksSUFBSUUsRUFBTyxLQUFLLFdBQVcsY0FBYyxjQUFjRixDQUFRLElBQUksRUFFbkUsT0FBS0UsSUFDRCxRQUFRLE1BQU0sUUFBUUYsQ0FBUSxpQkFBaUIsRUFDeEMsS0FJZCxFQ2hGTCxNQUFNTyxVQUFpRFosQ0FDdkQsQ0FNSSxhQUFjLENBQ1YsTUFBTSw2Q0FBNkMsRUFOdkRHLEVBQUEsbUJBQWMsU0FDZEEsRUFBQSxxQkFBZ0IsV0FDaEJBLEVBQUEscUJBQWdCLFdBQ2hCQSxFQUFBLGtCQUFhLE9BSVosQ0FFRCxXQUFXVSxFQUFhQyxFQUN4QixDQUNJLEtBQUssbUJBQW1CLFVBQVdELENBQVcsRUFDOUMsS0FBSyxVQUFVLE9BQU8sS0FBSyxZQUFhLEtBQUssY0FBZSxLQUFLLFdBQVksS0FBSyxhQUFhLEVBQy9GLEtBQUssVUFBVSxJQUFJQyxDQUFXLENBQ2pDLENBQ0wsQ0FHQSxlQUFlLE9BQU8scUNBQXNDRixDQUF3QyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswXX0=
